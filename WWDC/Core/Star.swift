//
//  Star.swift
//  WWDC
//
//  Created by Laurent Mihalkovic on 4/5/16.
//  Copyright Â© 2016 Laurent Mihalkovic. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Star : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfStarStroked: UIImage?
        static var starStrokedTargets: [AnyObject]?
        static var imageOfStarFilled: UIImage?
        static var starFilledTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawStarStroked() {
        //// Color Declarations
        let fill2 = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let stroke2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Stars
        //// Star-1-Copy-2 Drawing
        let star1Copy2Path = UIBezierPath()
        star1Copy2Path.moveToPoint(CGPoint(x: 37.09, y: 55.22))
        star1Copy2Path.addLineToPoint(CGPoint(x: 14.17, y: 71.28))
        star1Copy2Path.addLineToPoint(CGPoint(x: 23.09, y: 44.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 0, y: 27.67))
        star1Copy2Path.addLineToPoint(CGPoint(x: 28.63, y: 27.95))
        star1Copy2Path.addLineToPoint(CGPoint(x: 37.09, y: 0.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 45.55, y: 27.95))
        star1Copy2Path.addLineToPoint(CGPoint(x: 74.18, y: 27.67))
        star1Copy2Path.addLineToPoint(CGPoint(x: 51.09, y: 44.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 60.01, y: 71.28))
        star1Copy2Path.addLineToPoint(CGPoint(x: 37.09, y: 55.22))
        star1Copy2Path.closePath()
        star1Copy2Path.miterLimit = 4;

        star1Copy2Path.usesEvenOddFillRule = true;

        fill2.setFill()
        star1Copy2Path.fill()
        stroke2.setStroke()
        star1Copy2Path.lineWidth = 1
        star1Copy2Path.stroke()
    }

    public class func drawStarFilled() {
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// TvOS
        //// Rating
        //// Stars
        //// Star-1-Copy-2 Drawing
        let star1Copy2Path = UIBezierPath()
        star1Copy2Path.moveToPoint(CGPoint(x: 37.09, y: 55.22))
        star1Copy2Path.addLineToPoint(CGPoint(x: 14.17, y: 71.28))
        star1Copy2Path.addLineToPoint(CGPoint(x: 23.09, y: 44.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 0, y: 27.67))
        star1Copy2Path.addLineToPoint(CGPoint(x: 28.63, y: 27.95))
        star1Copy2Path.addLineToPoint(CGPoint(x: 37.09, y: 0.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 45.55, y: 27.95))
        star1Copy2Path.addLineToPoint(CGPoint(x: 74.18, y: 27.67))
        star1Copy2Path.addLineToPoint(CGPoint(x: 51.09, y: 44.72))
        star1Copy2Path.addLineToPoint(CGPoint(x: 60.01, y: 71.28))
        star1Copy2Path.addLineToPoint(CGPoint(x: 37.09, y: 55.22))
        star1Copy2Path.closePath()
        star1Copy2Path.miterLimit = 4;

        star1Copy2Path.usesEvenOddFillRule = true;

        fillColor.setFill()
        star1Copy2Path.fill()
    }

    //// Generated Images

    public class var imageOfStarStroked: UIImage {
        if Cache.imageOfStarStroked != nil {
            return Cache.imageOfStarStroked!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 72), false, 0)
            Star.drawStarStroked()

        Cache.imageOfStarStroked = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStarStroked!
    }

    public class var imageOfStarFilled: UIImage {
        if Cache.imageOfStarFilled != nil {
            return Cache.imageOfStarFilled!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 72), false, 0)
            Star.drawStarFilled()

        Cache.imageOfStarFilled = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStarFilled!
    }

    //// Customization Infrastructure

    @IBOutlet var starStrokedTargets: [AnyObject]! {
        get { return Cache.starStrokedTargets }
        set {
            Cache.starStrokedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: Star.imageOfStarStroked)
            }
        }
    }

    @IBOutlet var starFilledTargets: [AnyObject]! {
        get { return Cache.starFilledTargets }
        set {
            Cache.starFilledTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: Star.imageOfStarFilled)
            }
        }
    }

}
